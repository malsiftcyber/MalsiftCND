#!/usr/bin/env python3
"""
Build Windows installers (.exe and .msi) for MalsiftCND Discovery Agent
"""
import os
import sys
import subprocess
import shutil
import tempfile
from pathlib import Path


def run_command(command, cwd=None):
    """Run command and return success status"""
    try:
        result = subprocess.run(command, shell=True, cwd=cwd, check=True, 
                              capture_output=True, text=True)
        print(f"✓ {command}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"✗ {command}")
        print(f"Error: {e.stderr}")
        return False


def create_nsis_installer():
    """Create NSIS installer script"""
    nsis_script = """
; MalsiftCND Discovery Agent Windows Installer
; Generated by build_windows_installers.py

!define PRODUCT_NAME "MalsiftCND Discovery Agent"
!define PRODUCT_VERSION "1.0.0"
!define PRODUCT_PUBLISHER "Malsift Cyber"
!define PRODUCT_WEB_SITE "https://github.com/malsiftcyber/MalsiftCND"
!define PRODUCT_DIR_REGKEY "Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\malsift-agent.exe"
!define PRODUCT_UNINST_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

SetCompressor lzma

; Modern UI
!include "MUI2.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "icon.ico"
!define MUI_UNICON "icon.ico"

; Welcome page
!insertmacro MUI_PAGE_WELCOME

; License page
!insertmacro MUI_PAGE_LICENSE "LICENSE.txt"

; Components page
!insertmacro MUI_PAGE_COMPONENTS

; Directory page
!insertmacro MUI_PAGE_DIRECTORY

; Instfiles page
!insertmacro MUI_PAGE_INSTFILES

; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\\malsift-agent.exe"
!define MUI_FINISHPAGE_RUN_TEXT "Start MalsiftCND Agent"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "malsift-agent-installer.exe"
InstallDir "$PROGRAMFILES\\MalsiftCND"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

Section "Core Files" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
  File "malsift-agent.exe"
  File "agent_config.json"
  File "README.txt"
  File "LICENSE.txt"
  
  ; Create logs directory
  CreateDirectory "$INSTDIR\\logs"
  
  ; Create uninstaller
  WriteUninstaller "$INSTDIR\\uninst.exe"
  
  ; Registry entries
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\\malsift-agent.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\\malsift-agent.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  
  ; Calculate size
  ${GetSize} "$INSTDIR" "/S=0K" $0 $1 $2
  IntFmt $0 "0x%08X" $0
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "EstimatedSize" "$0"
SectionEnd

Section "Windows Service" SEC02
  ; Install as Windows Service
  ExecWait '"$INSTDIR\\malsift-agent.exe" --install-service'
  
  ; Start the service
  ExecWait 'net start "MalsiftCND Agent"'
SectionEnd

Section "Start Menu Shortcuts" SEC03
  CreateDirectory "$SMPROGRAMS\\MalsiftCND"
  CreateShortCut "$SMPROGRAMS\\MalsiftCND\\MalsiftCND Agent.lnk" "$INSTDIR\\malsift-agent.exe"
  CreateShortCut "$SMPROGRAMS\\MalsiftCND\\Configuration.lnk" "notepad.exe" "$INSTDIR\\agent_config.json"
  CreateShortCut "$SMPROGRAMS\\MalsiftCND\\Uninstall.lnk" "$INSTDIR\\uninst.exe"
SectionEnd

Section "Desktop Shortcut" SEC04
  CreateShortCut "$DESKTOP\\MalsiftCND Agent.lnk" "$INSTDIR\\malsift-agent.exe"
SectionEnd

; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC01} "Core agent files and configuration"
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC02} "Install and start as Windows Service"
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC03} "Create Start Menu shortcuts"
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC04} "Create Desktop shortcut"
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
FunctionEnd

Section Uninstall
  ; Stop and remove service
  ExecWait 'net stop "MalsiftCND Agent"'
  ExecWait '"$INSTDIR\\malsift-agent.exe" --uninstall-service'
  
  ; Remove files
  Delete "$INSTDIR\\malsift-agent.exe"
  Delete "$INSTDIR\\agent_config.json"
  Delete "$INSTDIR\\README.txt"
  Delete "$INSTDIR\\LICENSE.txt"
  Delete "$INSTDIR\\uninst.exe"
  
  ; Remove directories
  RMDir /r "$INSTDIR\\logs"
  RMDir "$INSTDIR"
  
  ; Remove shortcuts
  Delete "$SMPROGRAMS\\MalsiftCND\\MalsiftCND Agent.lnk"
  Delete "$SMPROGRAMS\\MalsiftCND\\Configuration.lnk"
  Delete "$SMPROGRAMS\\MalsiftCND\\Uninstall.lnk"
  RMDir "$SMPROGRAMS\\MalsiftCND"
  Delete "$DESKTOP\\MalsiftCND Agent.lnk"
  
  ; Remove registry entries
  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  
  SetAutoClose true
SectionEnd
"""
    return nsis_script


def create_msi_wix_script():
    """Create WiX MSI installer script"""
    wix_script = """<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="MalsiftCND Discovery Agent" Language="1033" Version="1.0.0.0" Manufacturer="Malsift Cyber" UpgradeCode="PUT-GUID-HERE">
    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />

    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
    <MediaTemplate />

    <Feature Id="ProductFeature" Title="MalsiftCND Discovery Agent" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
    </Feature>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLFOLDER" Name="MalsiftCND">
          <Component Id="MainExecutable" Guid="*">
            <File Id="MalsiftAgentExe" Source="malsift-agent.exe" KeyPath="yes" />
            <File Id="AgentConfig" Source="agent_config.json" />
            <File Id="ReadmeFile" Source="README.txt" />
            <File Id="LicenseFile" Source="LICENSE.txt" />
            
            <ServiceInstall Id="MalsiftAgentService" Type="ownProcess" Name="MalsiftCND Agent" DisplayName="MalsiftCND Discovery Agent" Description="MalsiftCND Network Discovery Agent" Start="auto" Account="LocalSystem" ErrorControl="normal" />
            <ServiceControl Id="StartMalsiftAgentService" Start="install" Stop="both" Remove="uninstall" Name="MalsiftCND Agent" Wait="yes" />
          </Component>
        </Directory>
      </Directory>
      
      <Directory Id="ProgramMenuFolder">
        <Directory Id="ProgramMenuDir" Name="MalsiftCND">
          <Component Id="ProgramMenuDir" Guid="*">
            <RemoveFolder Id="ProgramMenuDir" On="uninstall" />
            <RegistryValue Root="HKCU" Key="Software\\MalsiftCND" Name="installed" Type="integer" Value="1" KeyPath="yes" />
          </Component>
        </Directory>
      </Directory>
      
      <Directory Id="DesktopFolder" Name="Desktop">
        <Component Id="ApplicationShortcutDesktop" Guid="*">
          <Shortcut Id="ApplicationDesktopShortcut" Directory="DesktopFolder" Name="MalsiftCND Agent" WorkingDirectory="INSTALLFOLDER" Icon="MalsiftAgentExe" IconIndex="0" Advertise="yes" />
          <RemoveFolder Id="DesktopFolder" On="uninstall" />
          <RegistryValue Root="HKCU" Key="Software\\MalsiftCND" Name="desktop" Type="integer" Value="1" KeyPath="yes" />
        </Component>
      </Directory>
    </Directory>

    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentRef Id="MainExecutable" />
      <ComponentRef Id="ProgramMenuDir" />
      <ComponentRef Id="ApplicationShortcutDesktop" />
    </ComponentGroup>

    <Icon Id="icon.ico" SourceFile="icon.ico" />
    <Property Id="ARPPRODUCTICON" Value="icon.ico" />
    <Property Id="ARPHELPLINK" Value="https://github.com/malsiftcyber/MalsiftCND" />
    <Property Id="ARPURLINFOABOUT" Value="https://github.com/malsiftcyber/MalsiftCND" />
  </Product>
</Wix>"""
    return wix_script


def create_standalone_exe():
    """Create standalone executable installer using PyInstaller with --onefile"""
    standalone_script = """
import sys
import os
import subprocess
import tempfile
import shutil
from pathlib import Path

def create_standalone_exe():
    \"\"\"Create standalone executable with embedded configuration\"\"\"
    
    # Create temporary directory for build
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # Copy agent source
        agent_source = Path("agent/malsift_agent.py")
        if not agent_source.exists():
            print("Error: Agent source not found")
            return False
        
        # Create embedded configuration
        config_content = '''
{
  "server_url": "https://your-malsift-server.com",
  "ssl_enabled": true,
  "heartbeat_interval": 60,
  "scan_enabled": true,
  "scan_interval_minutes": 60,
  "max_concurrent_scans": 5,
  "scan_timeout_seconds": 300,
  "target_networks": ["192.168.0.0/16", "10.0.0.0/8"],
  "excluded_networks": ["127.0.0.0/8"],
  "target_ports": [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3389],
  "excluded_ports": [],
  "log_level": "INFO",
  "log_file": "malsift_agent.log"
}
'''
        
        # Create spec file for PyInstaller
        spec_content = f'''
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['agent/malsift_agent.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('agent_config.json', '.'),
    ],
    hiddenimports=[
        'aiohttp',
        'psutil',
        'ssl',
        'json',
        'logging',
        'platform',
        'subprocess',
        'time',
        'uuid',
        'argparse',
        'sys',
        'os',
        'datetime',
        'signal',
        'threading',
        'asyncio'
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='malsift-agent',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icon.ico' if os.path.exists('icon.ico') else None,
)
'''
        
        # Write spec file
        spec_file = temp_path / "malsift_agent.spec"
        with open(spec_file, 'w') as f:
            f.write(spec_content)
        
        # Write embedded config
        config_file = temp_path / "agent_config.json"
        with open(config_file, 'w') as f:
            f.write(config_content)
        
        # Run PyInstaller
        cmd = f"pyinstaller --clean {spec_file}"
        if not run_command(cmd, cwd=temp_path):
            return False
        
        # Copy result to dist directory
        dist_dir = Path("dist")
        dist_dir.mkdir(exist_ok=True)
        
        exe_file = temp_path / "dist" / "malsift-agent.exe"
        if exe_file.exists():
            shutil.copy2(exe_file, dist_dir / "malsift-agent-standalone.exe")
            print(f"✓ Created standalone executable: {dist_dir / 'malsift-agent-standalone.exe'}")
            return True
        
        return False

if __name__ == "__main__":
    create_standalone_exe()
"""
    return standalone_script


def build_windows_installers():
    """Build Windows installers (.exe and .msi)"""
    print("Building Windows installers for MalsiftCND Discovery Agent...")
    
    # Ensure we're in the right directory
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    # Create build directory
    build_dir = project_root / "build" / "windows"
    dist_dir = project_root / "dist" / "windows"
    
    build_dir.mkdir(parents=True, exist_ok=True)
    dist_dir.mkdir(parents=True, exist_ok=True)
    
    # Clean previous builds
    if build_dir.exists():
        shutil.rmtree(build_dir)
    if dist_dir.exists():
        shutil.rmtree(dist_dir)
    
    build_dir.mkdir(parents=True, exist_ok=True)
    dist_dir.mkdir(parents=True, exist_ok=True)
    
    # Build agent executable first
    print("Building agent executable...")
    if not run_command(f"pyinstaller --onefile --name malsift-agent --distpath {dist_dir} agent/malsift_agent.py", cwd=project_root):
        return False
    
    # Create configuration file
    config_content = """{
  "server_url": "https://your-malsift-server.com",
  "ssl_enabled": true,
  "heartbeat_interval": 60,
  "scan_enabled": true,
  "scan_interval_minutes": 60,
  "max_concurrent_scans": 5,
  "scan_timeout_seconds": 300,
  "target_networks": ["192.168.0.0/16", "10.0.0.0/8"],
  "excluded_networks": ["127.0.0.0/8"],
  "target_ports": [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3389],
  "excluded_ports": [],
  "log_level": "INFO",
  "log_file": "malsift_agent.log"
}"""
    
    config_file = dist_dir / "agent_config.json"
    with open(config_file, 'w') as f:
        f.write(config_content)
    
    # Create README
    readme_content = """MalsiftCND Discovery Agent

This is the MalsiftCND Discovery Agent for Windows.

Installation:
1. Run the installer as Administrator
2. Configure the agent with your server URL
3. The agent will install as a Windows Service

Configuration:
Edit agent_config.json to configure the agent settings.

Documentation:
https://github.com/malsiftcyber/MalsiftCND

Support:
https://github.com/malsiftcyber/MalsiftCND/issues
"""
    
    readme_file = dist_dir / "README.txt"
    with open(readme_file, 'w') as f:
        f.write(readme_content)
    
    # Create LICENSE
    license_content = """MIT License

Copyright (c) 2024 Malsift Cyber

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
    
    license_file = dist_dir / "LICENSE.txt"
    with open(license_file, 'w') as f:
        f.write(license_content)
    
    # Create NSIS installer
    print("Creating NSIS installer...")
    nsis_script = create_nsis_installer()
    nsis_file = build_dir / "installer.nsi"
    with open(nsis_file, 'w') as f:
        f.write(nsis_script)
    
    # Check if NSIS is available
    if run_command("makensis /VERSION"):
        # Build NSIS installer
        if run_command(f'makensis "{nsis_file}"', cwd=build_dir):
            nsis_output = build_dir / "malsift-agent-installer.exe"
            if nsis_output.exists():
                shutil.copy2(nsis_output, dist_dir)
                print(f"✓ Created NSIS installer: {dist_dir / 'malsift-agent-installer.exe'}")
            else:
                print("✗ NSIS installer not found")
        else:
            print("✗ Failed to build NSIS installer")
    else:
        print("✗ NSIS not found - skipping NSIS installer")
    
    # Create WiX MSI installer
    print("Creating WiX MSI installer...")
    wix_script = create_msi_wix_script()
    wix_file = build_dir / "installer.wxs"
    with open(wix_file, 'w') as f:
        f.write(wix_script)
    
    # Check if WiX is available
    if run_command("candle /?"):
        # Build WiX MSI
        if run_command(f'candle "{wix_file}"', cwd=build_dir):
            wix_obj = build_dir / "installer.wixobj"
            if wix_obj.exists():
                if run_command(f'light "{wix_obj}"', cwd=build_dir):
                    wix_output = build_dir / "MalsiftCND Discovery Agent.msi"
                    if wix_output.exists():
                        shutil.copy2(wix_output, dist_dir)
                        print(f"✓ Created MSI installer: {dist_dir / 'MalsiftCND Discovery Agent.msi'}")
                    else:
                        print("✗ MSI installer not found")
                else:
                    print("✗ Failed to link MSI installer")
            else:
                print("✗ WiX object file not found")
        else:
            print("✗ Failed to compile WiX installer")
    else:
        print("✗ WiX not found - skipping MSI installer")
    
    # Create standalone executable
    print("Creating standalone executable...")
    standalone_script = create_standalone_exe()
    standalone_file = build_dir / "create_standalone.py"
    with open(standalone_file, 'w') as f:
        f.write(standalone_script)
    
    if run_command(f'python "{standalone_file}"', cwd=build_dir):
        standalone_output = dist_dir / "malsift-agent-standalone.exe"
        if standalone_output.exists():
            print(f"✓ Created standalone executable: {standalone_output}")
        else:
            print("✗ Standalone executable not found")
    else:
        print("✗ Failed to create standalone executable")
    
    # Create simple batch installer
    print("Creating batch installer...")
    batch_content = """@echo off
echo Installing MalsiftCND Discovery Agent...

REM Check if running as administrator
net session >nul 2>&1
if %errorLevel% == 0 (
    echo Running as Administrator - OK
) else (
    echo This script requires Administrator privileges.
    echo Please run as Administrator.
    pause
    exit /b 1
)

REM Create installation directory
set INSTALL_DIR=%ProgramFiles%\\MalsiftCND
echo Creating installation directory: %INSTALL_DIR%
mkdir "%INSTALL_DIR%" 2>nul

REM Copy files
echo Copying agent files...
copy "malsift-agent.exe" "%INSTALL_DIR%\\" >nul
copy "agent_config.json" "%INSTALL_DIR%\\" >nul
copy "README.txt" "%INSTALL_DIR%\\" >nul
copy "LICENSE.txt" "%INSTALL_DIR%\\" >nul

REM Create logs directory
mkdir "%INSTALL_DIR%\\logs" 2>nul

REM Install as Windows Service
echo Installing as Windows Service...
"%INSTALL_DIR%\\malsift-agent.exe" --install-service

REM Start the service
echo Starting service...
net start "MalsiftCND Agent"

REM Create Start Menu shortcuts
echo Creating Start Menu shortcuts...
set START_MENU=%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\MalsiftCND
mkdir "%START_MENU%" 2>nul
echo Set oWS = WScript.CreateObject("WScript.Shell") > "%TEMP%\\CreateShortcut.vbs"
echo sLinkFile = "%START_MENU%\\MalsiftCND Agent.lnk" >> "%TEMP%\\CreateShortcut.vbs"
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> "%TEMP%\\CreateShortcut.vbs"
echo oLink.TargetPath = "%INSTALL_DIR%\\malsift-agent.exe" >> "%TEMP%\\CreateShortcut.vbs"
echo oLink.Save >> "%TEMP%\\CreateShortcut.vbs"
cscript "%TEMP%\\CreateShortcut.vbs" >nul
del "%TEMP%\\CreateShortcut.vbs"

echo.
echo MalsiftCND Discovery Agent installed successfully!
echo Installation directory: %INSTALL_DIR%
echo The agent is running as a Windows Service.
echo.
echo To configure the agent, edit: %INSTALL_DIR%\\agent_config.json
echo To view logs, check: %INSTALL_DIR%\\logs\\
echo.
pause
"""
    
    batch_file = dist_dir / "install-agent.bat"
    with open(batch_file, 'w') as f:
        f.write(batch_content)
    
    print(f"✓ Created batch installer: {batch_file}")
    
    # Create uninstaller
    uninstall_content = """@echo off
echo Uninstalling MalsiftCND Discovery Agent...

REM Check if running as administrator
net session >nul 2>&1
if %errorLevel% == 0 (
    echo Running as Administrator - OK
) else (
    echo This script requires Administrator privileges.
    echo Please run as Administrator.
    pause
    exit /b 1
)

REM Stop and remove service
echo Stopping service...
net stop "MalsiftCND Agent" 2>nul
echo Removing service...
"%ProgramFiles%\\MalsiftCND\\malsift-agent.exe" --uninstall-service 2>nul

REM Remove files
echo Removing files...
rmdir /s /q "%ProgramFiles%\\MalsiftCND" 2>nul

REM Remove Start Menu shortcuts
echo Removing Start Menu shortcuts...
rmdir /s /q "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\MalsiftCND" 2>nul

echo.
echo MalsiftCND Discovery Agent uninstalled successfully!
echo.
pause
"""
    
    uninstall_file = dist_dir / "uninstall-agent.bat"
    with open(uninstall_file, 'w') as f:
        f.write(uninstall_content)
    
    print(f"✓ Created uninstaller: {uninstall_file}")
    
    print("\nWindows installer build completed!")
    print(f"Installers created in: {dist_dir}")
    
    return True


def main():
    """Main entry point"""
    if not build_windows_installers():
        sys.exit(1)
    
    print("\nWindows installers created successfully!")
    print("Available installers:")
    print("- malsift-agent-installer.exe (NSIS installer)")
    print("- MalsiftCND Discovery Agent.msi (WiX MSI installer)")
    print("- malsift-agent-standalone.exe (Standalone executable)")
    print("- install-agent.bat (Simple batch installer)")
    print("- uninstall-agent.bat (Uninstaller)")


if __name__ == "__main__":
    main()
